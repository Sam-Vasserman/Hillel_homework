def buble_sort(l):
    t = l.copy()
    for n in range(len(t)):
        for i in range(len(t)-1):
            if t[i]>t[i+1]:
                t[i],t[i+1]= t[i+1],t[i]
    return t
nums = [4, 1, 6, 3, 2, 7, 8]  
sorted = buble_sort(nums)
print (sorted) 

# могу ответить как он работате в лс 
# 2
my_list = [
    [34587, 'Learning Python, Mark Lutz', 4, 40.95],
    [98762, 'Programming Python, Mark Lutz', 5, 56.80],
    [77226, 'Head First Python, Paul Barry', 3, 32.95],
    [88112, 'Einfuhrung in Python3, Bernd Klein', 3, 24.99]
]
def need_list(my_list, n):
    my_result = [i[el] for i in my_list for el in range(len(i)) if el == n]
    return my_result

number_order = need_list(my_list, 0)
summa_order = (list(map(lambda x, y: (x*y if x*y>100 else x*y+10), need_list(my_list, 2), need_list(my_list, 3))))
result_order = []

for i in range(len(number_order)):
    time_list = [number_order[i], summa_order[i]]
    result_order.append(tuple(time_list))
    
print (result_order)

# 3

my_list2 = [
    [24387, ' на русском', 2, 4.59],
    [18762, 'The C Programming Language (2nd Edition)', 12, 78.80],
    [87236, 'C Programming Absolute Beginners Guide', 1, 23.55],
    [58132, 'Effective Modern C++: 42 Specific Ways to Improve Your Use of C++11 and C++14', 9,
      42.89]
    ]

my_list.extend(my_list2)
print(my_list)

# one more 
def new_list(n=4):
    time_list = [] 
    for i in range(n):
        time_list.append(get_input_number(i))
    return time_list
    
def get_input_number(n):
    if 0 == n : return int(input("Введите номер книги: "))
    if 1 == n : return str(input("Введите название книги: "))
    if 2 == n : return int(input("Введите количество книг: "))
    if 3 == n : return float(input("Введите цену книги: "))
    
def add_list(my_list):
    return my_list.append(new_list())

def count_add_new_elements(count):
    for i in range(count):
        add_list(my_list)
    return
count_add_new_elements(2)
print (my_list)

# 4
sorted_list_price = sorted(my_list, key=lambda x: x[3], reverse=True)

print(sorted_list_price)

# 5
sorted_list_quantity = list(filter(lambda x: x[2] > 5, my_list))

print(sorted_list_quantity)
